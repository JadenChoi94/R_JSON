x <- seq(-100,100,by=0.001)
n <- 1000
t.5.mean <- rep(NA,n)
t.20.mean <- rep(NA,n)
t.40.mean <- rep(NA,n)
t.160.mean <- rep(NA,n)
for (i in 1:n) {
t.5.mean[i] <- mean(rt(5,df))
t.20.mean[i] <- mean(rt(20,df))
t.40.mean[i] <- mean(rt(40,df))
t.160.mean[i] <- mean(rt(160,df))
}
options(digits=4)
c(mean(t.5.mean),sd(t.5.mean))
par(mfrow=c(2,2))
hist(t.5.mean,prob=T,main="T with n=5",
col="green",border="red")
x1 <- seq(min(t.5.mean),max(t.5.mean),length=1000)
y1 <- dnorm(x1,mean=0,sd=sqrt(10/8)/sqrt(5))
lines(x1,y1,lty=2,lwd=2,col="blue")
sd=sqrt(10/8)/sqrt(5)
sd
dnorm(3, 6, prob=1/3)
dbinom(3, 6, prob=1/3)
# 1-1. 시행횟수가 6이고 성공확률이 1/3인 이항분포에서 성공횟수가 3이 될 확률
(dbinom(3, 6, prob=1/3))
# 1-1. 시행횟수가 6이고 성공확률이 1/3인 이항분포에서 성공횟수가 3이 될 확률
dbinom(3, 6, prob=1/3)
# 1-2. 평균이 170이고 표준편차가 6인 정규분포에서 상위20%되는 사람들의 키 범위
1-pnorm(0.2, 170, 6)
# 1-2. 평균이 170이고 표준편차가 6인 정규분포에서 상위20%되는 사람들의 키 범위
(1-pnorm(0.2, 170, 6))
# 1-2. 평균이 170이고 표준편차가 6인 정규분포에서 상위20%되는 사람들의 키 범위
1-pnorm(0.2, 170, 6)
# 1-1. 시행횟수가 6이고 성공확률이 1/3인 이항분포에서 성공횟수가 3이 될 확률
dbinom(3, 6, prob=1/3)
pnorm(0.2, 170, 6)
qchisq(0.05, df)
# 1-4. 자유도가 2인 t-분포에서 누적확률이 0.975일 때의 값
pt(0.975, 2)
# 1-3. 자유도가 3인 카이제곱분포에서 누적확률이 95%일 때의 값
qchisq(0.05, 3)
# 2.
cat("정답: 2,4,5번")
# 3.
head(iris)
library(dplyr)
iris_setosa<-iris %>%
filter(Species=='setosa')
iris_setosa
mean(iris_setosa)
mean(iris_setosa$Sepal.Length)
sd(iris_setosa$Sepal.Length)
cor(iris_setosa$Sepal.Length)
var(iris_setosa$Sepal.Length)
dim(iris_setosa$Sepal.Length)
str(iris_setosa$Sepal.Length)
# 1-4. 자유도가 2인 t-분포에서 누적확률이 0.975일 때의 값
qt(0.975, 2)
# 1-3. 자유도가 3인 카이제곱분포에서 누적확률이 95%일 때의 값
pchisq(0.05, 3)
# 1-3. 자유도가 3인 카이제곱분포에서 누적확률이 95%일 때의 값
pchisq(0.95, 3)
sd(iris_setosa$Sepal.Length)
var(iris_setosa$Sepal.Length)
avg<-mean(iris_setosa$Sepal.Length)
str(iris)
length(iris)
iris
avg-1.96*
x<-50
x<-50
y<-150
p.hat<-x/y
alpha<-0.05
z<-qnorm(1-(alpha/2)))
z<-qnorm(1-(alpha/2))
ll <- p.hat - z*sqrt(p.hat*(1-p.hat)/n)
ul <- p.hat + z*sqrt(p.hat*(1-p.hat)/n)
(c.i <- c(ll,ul))
(c.i <- c(ll,ul))
cat('약 0.304~0.363')
# 4. 한 농구 선수가 자유투를 던지면 10번중에서 7번 성공한다고 할 때 다음을 R을 이용하여 풀이하시오
# 4-1. 10번 던져서 9번 이상 성공할 확률
1-pbinom(9,size=10,prob=7/10)
# 4-2. 10번 던질 때 5번 이상 8번 이하로 성공할 확률
pbinom(8,size=10,prob=7/10)-pbinom(5,size=10,prob=7/10)
# 5. 다음을 R을 이용하여 검정하시오
# 2006년 조사에 의하면 한국인의 1인 1일 평균 알코올 섭취량이 8.1g이다.
# 2008년 무작위로 뽑은 알코올 섭취량은 다음과 같다.
alcol<-c(16.90, 13.21, 15.67, 9.87, 13.15, 9.98, 3.56, 14.50, 8.12, 6.97)
#평균 알코올 섭취량이 달라졌다고 할 수 있는가?
shapiro.test(alcol)
t.test(grade,mu=8.1,alternative="greater")
t.test(alcol,mu=8.1,alternative="greater")
t.test(alcol,mu=8.1,alternative="two.sided")
t.test(alcol,mu=8.1,alternative="two.sided")
iris$Sepal.Length
iris_setosa<-iris %>%
filter(Species=='setosa')
t.test(alcol,mu=8.1,alternative="two.sided") #
# 5. 다음을 R을 이용하여 검정하시오
# 2006년 조사에 의하면 한국인의 1인 1일 평균 알코올 섭취량이 8.1g이다.
# 2008년 무작위로 뽑은 알코올 섭취량은 다음과 같다.
alcol<-c(16.90, 13.21, 15.67, 9.87, 13.15, 9.98, 3.56, 14.50, 8.12, 6.97)
#평균 알코올 섭취량이 달라졌다고 할 수 있는가?
# H0==달라졌다 v.s H1== 달라지지 않았다
shapiro.test(alcol) #p-value가 0.8 이므로 정규분포에 따른다고 볼수있다.
t.test(alcol,mu=8.1,alternative="two.sided")
# 6.정규분포에서 from <=X<=to 확률을 구하는 함수
# rangenorm(from, to, mean, sd)을 작성하고 rangenorm(-1.96, 1.96, 0, 1)의 값을 구하시오.
rangenorm(-1.96, 1.96, 0, 1)
# 6.정규분포에서 from <=X<=to 확률을 구하는 함수
# rangenorm(from, to, mean, sd)을 작성하고 rangenorm(-1.96, 1.96, 0, 1)의 값을 구하시오.
library(rangenorm)
# 6.정규분포에서 from <=X<=to 확률을 구하는 함수
# rangenorm(from, to, mean, sd)을 작성하고 rangenorm(-1.96, 1.96, 0, 1)의 값을 구하시오.
install.packages('rangenorm')
library(rangenorm)
rangenorm(-1.96, 1.96, 0, 1)
# 6.정규분포에서 from <=X<=to 확률을 구하는 함수
# rangenorm(from, to, mean, sd)을 작성하고 rangenorm(-1.96, 1.96, 0, 1)의 값을 구하시오.
rangenorm(-1.96, 1.96, 0, 1)
# 7. mpg 데이터셋에서 다음을 검정해 보시오.
# 7-1.
mpg
# 7. mpg 데이터셋에서 다음을 검정해 보시오.
# 7-1.
library(ggplot2)
mpg
mpg$cty[mpg$class=="subcompact"]
shapiro.test(mpg$cty[mpg$class=="subcompact"])
qqnorm(mpg$cty[mpg$class=="subcompact"]) ; qqline(mpg$cty[mpg$class=="subcompact"])
qqnorm(mpg$cty[mpg$class=="subcompact"]) ; qqline(mpg$cty[mpg$class=="subcompact"])
#정규성을 나타내지 않는다.
mpg$cty[mpg$class=="midsize"]
shapiro.test(mpg$cty[mpg$class=="midsize"])
qqnorm(mpg$cty[mpg$class=="midsize"]) ; qqline(mpg$cty[mpg$class=="midsize"])
#이거 또한 정규성을 나타내지 않는다.
#만약 두집단 모두 정규성을 따른다고 가정하면
mpg1 <- mpg %>%
filter(class %in% c("subcompact","midsize"))
var.test(mpg1$cty~mpg1$class)
#p-value의 값이 굉장히 작으므로, 유의수준 0.05 하에서 두 집단의 분산은 다르다고 결론내린다
t.test(mpg1$cty~mpg1$class,var.equal=F)
#7-2.
mpg$cty[mpg$fl=="r"]
shapiro.test(mpg$cty[mpg$fl=="r"])
qqnorm(mpg$cty[mpg$fl=="r"]) ; qqline(mpg$cty[mpg$fl=="r"])
#7-2.
mpg$cty[mpg$fl=="r"]
shapiro.test(mpg$hwy[mpg$fl=="r"])
qqnorm(mpg$hwy[mpg$fl=="r"]) ; qqline(mpg$hwy[mpg$fl=="r"])
#7-2.
mpg$hwy[mpg$fl=="r"]
shapiro.test(mpg$hwy[mpg$fl=="r"])
qqnorm(mpg$hwy[mpg$fl=="r"]) ; qqline(mpg$hwy[mpg$fl=="r"])
mpg$hwy[mpg$fl=="p"]
shapiro.test(mpg$hwy[mpg$fl=="p"])
qqnorm(mpg$hwy[mpg$fl=="p"]) ; qqline(mpg$hwy[mpg$fl=="p"])
var.test(mpg2$hwy~mpg2$fl)
# 이 유의수준 0.05보다 작다. 따라서 두 집단 모두 정규분포를 따르지 않는다고 결론내린다. 이에 따라 다음과 같이
# 두가지의 경우로 나누어서 검정한다.
# 만약 두 집단의 가격이 모두 정규분포를 따른다고 가정한다면 2-sample T-test를 사용한다.
mpg2 <- mpg %>%
filter(fl %in% c("r","p"))
var.test(mpg2$hwy~mpg2$fl)
var.test(mpg2$hwy~mpg2$fl)
t.test(mpg2$hwy~mpg2$fl,var.equal=F)
#검정결과, p-value의 값이 약 0.043이므로, 유의수준 0.05 하에서 두 집단의 분산은 다르다고 결론내린다.
t.test(mpg2$hwy~mpg2$fl,var.equal=F)
install.packages("knitr")
install.packages("knitr")
# 8. 적합도를 검정하시오
x <- c(322, 109, 99, 29)
chisq.test(x, p=c(9, 3, 3, 1)/16)
chisq.test(x, p=c(9, 3, 3, 1)/16)
#p-value의 값이 굉장히 작으므로, 유의수준 0.05 하에서 두 집단의 분산은 다르다고 결론내린다
t.test(mpg1$cty~mpg1$class,var.equal=F)
# 9.'women'을 이용하여 다음을 구하시오
women
# 9.'women'을 이용하여 다음을 구하시오
fit<-im(weight~height, data=women)
# 9.'women'을 이용하여 다음을 구하시오
fit<-lm(weight~height, data=women)
summary(fit)
# 6.정규분포에서 from <=X<=to 확률을 구하는 함수
# rangenorm(from, to, mean, sd)을 작성하고 rangenorm(-1.96, 1.96, 0, 1)의 값을 구하시오.
library(dprep)
# 6.정규분포에서 from <=X<=to 확률을 구하는 함수
# rangenorm(from, to, mean, sd)을 작성하고 rangenorm(-1.96, 1.96, 0, 1)의 값을 구하시오.
install.packages('dprep')
# 6.정규분포에서 from <=X<=to 확률을 구하는 함수
# rangenorm(from, to, mean, sd)을 작성하고 rangenorm(-1.96, 1.96, 0, 1)의 값을 구하시오.
pnorm(1.96,mean=0,sd=1)-pnorm(-1.96,mean=0,sd=1)
lm(weight~height+I(height^2), women)
# 9.'women'을 이용하여 다음을 구하시오
plot(weight~height, women)
cor.test(women$weight, women$height)
# 9.'women'을 이용하여 다음을 구하시오
plot(weight~height, women)
fit<-lm(weight~height, data=women)
summary(fit)
cor.test(women$weight, women$height)
lm(weight~height+I(height^2), women)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
y<-150
p.hat<-x/y
alpha<-0.05
z<-qnorm(1-(alpha/2))
ll <- p.hat - z*sqrt(p.hat*(1-p.hat)/n)
ul <- p.hat + z*sqrt(p.hat*(1-p.hat)/n)
(c.i <- c(ll,ul))
cat('약 0.304~0.363')
library(dplyr)
x<-50
y<-150
p.hat<-x/y
alpha<-0.05
z<-qnorm(1-(alpha/2))
ll <- p.hat - z*sqrt(p.hat*(1-p.hat)/n)
ul <- p.hat + z*sqrt(p.hat*(1-p.hat)/n)
(c.i <- c(ll,ul))
cat('약 0.304~0.363')
# 4-1. 10번 던져서 9번 이상 성공할 확률
1-pbinom(9,size=10,prob=7/10)
# 4-2. 10번 던질 때 5번 이상 8번 이하로 성공할 확률
pbinom(8,size=10,prob=7/10)-pbinom(5,size=10,prob=7/10)
cat("정답: 2,4,5번")
# 1-1. 시행횟수가 6이고 성공확률이 1/3인 이항분포에서 성공횟수가 3이 될 확률
dbinom(3, 6, prob=1/3)
# 1-2. 평균이 170이고 표준편차가 6인 정규분포에서 상위20%되는 사람들의 키 범위
1-pnorm(0.2, 170, 6)
# 1-3. 자유도가 3인 카이제곱분포에서 누적확률이 95%일 때의 값
pchisq(0.95, 3)
# 1-4. 자유도가 2인 t-분포에서 누적확률이 0.975일 때의 값
qt(0.975, 2)
# 1-5. 표준정규분포에서 확률변수의 값이 1일 때의 누적확률
1
library(dplyr)
x<-50
y<-150
p.hat<-x/y
alpha<-0.05
z<-qnorm(1-(alpha/2))
ll <- p.hat - z*sqrt(p.hat*(1-p.hat)/x)
ul <- p.hat + z*sqrt(p.hat*(1-p.hat)/x)
(c.i <- c(ll,ul))
cat('약 0.304~0.363')
install.packages('jsonlite')
library(jsonlite)
pi
json_pi<-tojson(pi, digits=3)
json_pi<-toJSON(pi, digits=3)
fromJSON(json_pi)
city<-'대전'
json_city<-toJSON(city)
fromJSON(json_city)
subject<-c('국어','영어','수학')
json_subject<-toJSON(sunject)
json_subject<-toJSON(subject)
fromJSON(json_subject)
json_subject
{'name':'test',
'age':25,
'sex':'f'
'address':'seoul',
'hobby':'basketball'}
name<-c('test')
age<-c(25)
sex<-c('f')
address<-c('seoul')
hobby<-c('basketball')
person<-date.frame<-c('name','age','sex','address','hobby')
str(person)
name<-c('test')
age<-c(25)
sex<-c('f')
address<-c('seoul')
hobby<-c('basketball')
person<-date.frame<-c('name','age','sex','address','hobby')
str(person)
json_person<-toJSON(person)
prettify(json_person)
name(person)<-c('name','age','sex','address','hobby')
str(person)
name<-c('test')
age<-c(25)
sex<-c('f')
address<-c('seoul')
hobby<-c('basketball')
person<-date.frame<-c('name','age','sex','address','hobby')
name(person)<-c('name','age','sex','address','hobby')
names(person)<-c('name','age','sex','address','hobby')
str(person)
json_person<-toJSON(person)
prettify(json_person)
person<-date.frame<-c(name,age,sex,address,hobby)
names(person)<-c('name','age','sex','address','hobby')
str(person)
json_person<-toJSON(person)
prettify(json_person)
name<-c('test')
age<-c(25)
sex<-c('f')
address<-c('seoul')
hobby<-c('basketball')
person<-date.frame<-c(name,age,sex,address,hobby)
names(person)<-c('name','age','sex','address','hobby')
str(person)
json_person<-toJSON(person)
prettify(json_person)
# JSON 기본 (내장 데이터 처리)
library(jsonlite)
pi
json_pi <- toJSON(pi, digits = 3)
fromJSON(json_pi)
city <- '대전'
json_city <- toJSON(city)
fromJSON(json_city)
subject <- c('국어', '영어', '수학')
json_subject <- toJSON(subject)
fromJSON(json_subject)
# 데이터 프레임
# [
#   {
#     "Name": "Test",
#     "Age": 25,
#     "Sex": "F",
#     "Address": "Seoul",
#     "Hobby": "Basketball"
#   }
# ]
name <- c("Test")
age <- c(25)
sex <- c("F")
address <- c("Seoul")
hobby <- c("Basketball")
person <- data.frame(name, age, sex, address, hobby)
names(person) <- c("Name", "Age", "Sex", "Address", "Hobby")
str(person)
json_person <- toJSON(person)
prettify(json_person)
# ==========================================
df_json_person <- fromJSON(json_person)
str(df_json_person)
# 두개의 데이터프레임의 데이터 값이 같은지 비교
all(person == df_json_person)
# cars 내장 데이터로 테스트
cars
json_cars <- toJSON(cars)
df_json_cars <- fromJSON(json_cars)
all(cars == df_json_cars)
# JSON 파일로 부터 읽어서 데이터프레임 만들기
library(jsonlite)
setwd('D:/Workspace/R_Project/R_JSON')
setwd('D:/Workspace/R-Project/R_JSON')
# person.json 파일로 부터 읽기
wiki_person <- fromJSON("person.json")
str(wiki_person)
class(wiki_person)
# sample.json
data <- fromJSON('sample_json.txt')    # JSON 파일 읽기
str(data)
data <- as.data.frame(data)     # Data Frame으로 변환
names(data) <- c('id', 'like', 'share', 'comment', 'unique', 'msg', 'time')
data$like <- as.numeric(as.character(data$like))
# CSV 파일로 저장
write.csv(data, 'data.csv')
# Data Frame을 JSON 파일로 저장
json_data <- toJSON(data)
write(json_data, 'data.json')
prettify(json_data)
# CSV 파일로 저장
write.csv(data, 'data.csv')
# JSON 파일로 부터 읽어서 데이터프레임 만들기
library(jsonlite)
setwd('D:/Workspace/R-Project/R_JSON')
# person.json 파일로 부터 읽기
wiki_person <- fromJSON("person.json")
str(wiki_person)
class(wiki_person)
# sample.json
data <- fromJSON('sample_json.txt')    # JSON 파일 읽기
# sample.json
data <- fromJSON('sample_json')    # JSON 파일 읽기
# sample.json
data <- fromJSON('sample_json.txt')    # JSON 파일 읽기
# person.json 파일로 부터 읽기
wiki_person <- fromJSON("person.json")
str(wiki_person)
class(wiki_person)
# sample.json
data <- fromJSON('sample_json.txt')    # JSON 파일 읽기
# sample.json
data <- fromJSON('sample.json.txt')    # JSON 파일 읽기
str(data)
data <- as.data.frame(data)     # Data Frame으로 변환
names(data) <- c('id', 'like', 'share', 'comment', 'unique', 'msg', 'time')
data$like <- as.numeric(as.character(data$like))
# sample.json
data <- fromJSON('sample_json.txt')    # JSON 파일 읽기
# Converting JSON to R DataFrame
library(jsonlite)
library(httr)
df_repos <- fromJSON("https://api.github.com/users/hadley/repos")
str(df_repos)
names(df_repos)
names(df_repos$owner)
# Converting R DataFrame to JSON
json_repos <- toJSON(df_repos)
cat(json_repos)
minify(json_repos)
prettify(json_repos)
pi
json_pi <- toJSON(pi, digits = 3)
fromJSON(json_pi)
city <- '대전'
json_city <- toJSON(city)
fromJSON(json_city)
subject <- c('국어', '영어', '수학')
json_subject <- toJSON(subject)
fromJSON(json_subject)
# 데이터 프레임
# [
#   {
#     "Name": "Test",
#     "Age": 25,
#     "Sex": "F",
#     "Address": "Seoul",
#     "Hobby": "Basketball"
#   }
# ]
name <- c("Test")
age <- c(25)
sex <- c("F")
address <- c("Seoul")
hobby <- c("Basketball")
person <- data.frame(name, age, sex, address, hobby)
names(person) <- c("Name", "Age", "Sex", "Address", "Hobby")
str(person)
json_person <- toJSON(person)
prettify(json_person)
#==========================================
df_json_person <- fromJSON(json_person)
str(df_json_person)
# 두개의 데이터프레임의 데이터 값이 같은지 비교
all(person == df_json_person)
# cars 내장 데이터로 테스트
cars
json_cars <- toJSON(cars)
df_json_cars <- fromJSON(json_cars)
json_cars
df_json_cars
toJSON(cars)
# cars 내장 데이터로 테스트
head(cars)
json_cars <- toJSON(cars)
df_json_cars <- fromJSON(json_cars)
all(cars == df_json_cars)
# person.json 파일로 부터 읽기
wiki_person <- fromJSON("person.json")
str(wiki_person)
class(wiki_person)
# sample.json
data <- fromJSON('sample_json.txt')    # JSON 파일 읽기
str(data)
data <- as.data.frame(data)     # Data Frame으로 변환
names(data) <- c('id', 'like', 'share', 'comment', 'unique', 'msg', 'time')
head(data)
data$like
data$like <- as.numeric(as.character(data$like))
data$like
# CSV 파일로 저장
write.csv(data, 'data.csv')
# Data Frame을 JSON 파일로 저장
json_data <- toJSON(data)
write(json_data, 'data.json')
prettify(json_data)
# Converting JSON to R DataFrame
library(jsonlite)
library(httr)
df_repos <- fromJSON("https://api.github.com/users/hadley/repos")
df_repos
str(df_repos)
names(df_repos)
names(df_repos$owner)
# Converting R DataFrame to JSON
json_repos <- toJSON(df_repos)
cat(json_repos)
minify(json_repos)
prettify(json_repos)
# 공공데이터포털 API 이용하여 데이터 가져오기
# 지자체별 사고다발지역정보 조회 서비스
library(jsonlite)
base_url <- "http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg"
ServiceKey <- '   '
searchYearCd <- 2017
siDo <- 30    # 대전광역시
guGun <- 170  # 서구
numOfRows <- 10
pageNo <- 1
# http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
callback_url <- paste0(base_url, '?ServiceKey=', ServiceKey, '&searchYearCd=', searchYearCd,
'&siDo=', siDo, '&guGun=', guGun, '&numOfRows=', numOfRows,
'&pageNo=', pageNo, '&type=json')
responsData <- fromJSON(callback_url)
str(responsData)
cat("결과 코드 =", responsData$resultCode)
cat("결과 메시지 =", responsData$resultMsg)
cat("총 건수 =", responsData$totalCount)
